import json
from pathlib import Path
from typing import Dict, List, Optional, Any
import os

class LocalizationManager:
    def __init__(self, config):
        self.config = config
        self.available_locales: Dict[str, dict] = {}
        self.current_locale: str = 'ru'
        self.load_locales()

    def get_supported_languages(self) -> List[Dict[str, Any]]:
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É locales –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        locales_dir = Path(__file__).parent / 'locales'
        languages = []

        for locale_file in locales_dir.glob('*.json'):
            try:
                with open(locale_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    meta = data.get('_meta', {})

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    lang_code = meta.get('language_code', locale_file.stem)

                    languages.append({
                        'code': lang_code,
                        'name': meta.get('language_name', lang_code),
                        'flag': meta.get('flag', 'üåê'),
                        'file': locale_file.name,
                        'native_name': meta.get('native_name', lang_code)
                    })
            except Exception as e:
                print(f"Error loading locale {locale_file}: {str(e)}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —è–∑—ã–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        return sorted(languages, key=lambda x: x['name'])

    def load_locales(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–∫–∞–ª–∏ –∏–∑ –ø–∞–ø–∫–∏ locales"""
        locales_dir = Path(__file__).parent / 'locales'
        self.available_locales = {}

        if not locales_dir.exists():
            print(f"Locales directory not found: {locales_dir}")
            return

        for locale_file in locales_dir.glob('*.json'):
            try:
                with open(locale_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    meta = data.get('_meta', {})
                    lang_code = meta.get('language_code', locale_file.stem)

                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    if not meta.get('language_name'):
                        meta['language_name'] = lang_code.upper()
                    if not meta.get('native_name'):
                        meta['native_name'] = meta['language_name']
                    if not meta.get('flag'):
                        meta['flag'] = 'üåê'

                    self.available_locales[lang_code] = {
                        'meta': meta,
                        'translations': {k: v for k, v in data.items() if not k.startswith('_')}
                    }
            except Exception as e:
                print(f"Error loading locale {locale_file}: {str(e)}")

    def tr(self, key: str, *args, fallback: Optional[str] = None) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π"""
        def get_nested(data: dict, keys: list) -> Optional[str]:
            if not keys or not data:
                return None
            current_key = keys[0]
            if current_key in data:
                value = data[current_key]
                if len(keys) == 1:
                    return value
                elif isinstance(value, dict):
                    return get_nested(value, keys[1:])
            return None

        locale_data = self.available_locales.get(self.current_locale, {})
        translations = locale_data.get('translations', {})
        key_parts = key.split('.')
        text = get_nested(translations, key_parts)

        if text is None and self.current_locale != 'en':
            en_translations = self.available_locales.get('en', {}).get('translations', {})
            text = get_nested(en_translations, key_parts)

        if text is None:
            return fallback if fallback is not None else key

        if args:
            try:
                return text.format(*args)
            except:
                return text
        return text

    def get_supported_languages(self) -> List[Dict[str, Any]]:
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É locales –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        locales_dir = Path(__file__).parent / 'locales'
        languages = []

        for locale_file in locales_dir.glob('*.json'):
            try:
                with open(locale_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    meta = data.get('_meta', {})

                    lang_code = meta.get('language_code', locale_file.stem)

                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                    languages.append({
                        'code': lang_code,
                        'name': meta.get('language_name', lang_code.upper()),
                        'flag': meta.get('flag', 'üåê'),
                        'file': locale_file.name,
                        'native_name': meta.get('native_name', meta.get('language_name', lang_code.upper()))
                    })
            except Exception as e:
                print(f"Error loading locale {locale_file}: {str(e)}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —è–∑—ã–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        return sorted(languages, key=lambda x: x['name'])

    def change_language(self, lang_code: str):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫"""
        if lang_code in self.available_locales:
            self.current_locale = lang_code
            self.config.branch_settings['Locale'] = lang_code
            self.config.save_settings()
            return True
        return False