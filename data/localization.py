import json
from pathlib import Path
from typing import Dict, List, Optional, Any
from functools import lru_cache
import os

class LocalizationManager:
    def __init__(self, config):
        self.config = config
        self._locales_dir = Path(__file__).parent / 'locales'
        self._available_locales = {}  # type: Dict[str, dict]
        self.current_locale = 'ru'
        self._load_locales()
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É
        if current_profile := self.config.get_current_settings():
            self.current_locale = current_profile.get('Locale', 'ru')

    def _load_locales(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ª–æ–∫–∞–ª–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if not self._locales_dir.exists():
            print(f"Locales directory not found: {self._locales_dir}")
            return

        for locale_file in self._locales_dir.glob('*.json'):
            try:
                with open(locale_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    meta = data.get('_meta', {})
                    lang_code = meta.get('language_code', locale_file.stem)
                    
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    meta.update({
                        'language_name': meta.get('language_name', lang_code.upper()),
                        'native_name': meta.get('native_name', meta.get('language_name', lang_code.upper())),
                        'flag': meta.get('flag', 'üåê')
                    })
                    
                    self._available_locales[lang_code] = {
                        'meta': meta,
                        'translations': {k: v for k, v in data.items() if not k.startswith('_')}
                    }
            except Exception as e:
                print(f"Error loading locale {locale_file}: {str(e)}")

    @lru_cache(maxsize=1024)
    def tr(self, key: str, *args, fallback: Optional[str] = None) -> str:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É.
        """
        def get_nested(data: dict, keys: list) -> Optional[str]:
            for key_part in keys:
                if not isinstance(data, dict):
                    return None
                data = data.get(key_part)
            return data

        # –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫
        locale_data = self._available_locales.get(self.current_locale, {})
        text = get_nested(locale_data.get('translations', {}), key.split('.'))
        
        # –§–æ–ª–±–µ–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        if text is None and self.current_locale != 'en':
            en_data = self._available_locales.get('en', {})
            text = get_nested(en_data.get('translations', {}), key.split('.'))
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–ª–±–µ–∫
        if text is None:
            return fallback if fallback is not None else key

        try:
            return text.format(*args) if args else text
        except (IndexError, KeyError):
            return text

    def get_supported_languages(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        if not hasattr(self, '_cached_languages'):
            languages = []
            for lang_code, data in self._available_locales.items():
                meta = data['meta']
                languages.append({
                    'code': lang_code,
                    'name': meta['language_name'],
                    'native_name': meta['native_name'],
                    'flag': meta['flag']
                })
            self._cached_languages = sorted(languages, key=lambda x: x['name'])
        return self._cached_languages

    def change_language(self, lang_code: str) -> bool:
        """–ò–∑–º–µ–Ω—è–µ—Ç —è–∑—ã–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–µ—à–∞"""
        if lang_code in self._available_locales:
            self.current_locale = lang_code
            self.tr.cache_clear()  # –û—á–∏—â–∞–µ–º –∫–µ—à –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
            if current_settings := self.config.get_current_settings():
                current_settings["Locale"] = lang_code
                self.config.save_settings()
            return True
        return False

    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    COMMON_STRINGS = {
        'errors.invalid_choice': "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä",
        'menu.exit': "–í—ã—Ö–æ–¥",
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç—Ä–æ–∫–∏
    }

    def fast_tr(self, key: str) -> str:
        """–£–ª—å—Ç—Ä–∞–±—ã—Å—Ç—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å—Ç—Ä–æ–∫"""
        return self.COMMON_STRINGS.get(key, self.tr(key))
    
    def load_locales(self):
        """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤)"""
        self._load_locales()